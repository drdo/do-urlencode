(cl:in-package :urlencode)

(defvar +extra-unreserved-characters+ "-_.~")

(defun unreserved-char-p (c)
  (or (char<= #\A c #\Z)
      (char<= #\a c #\z)
      (char<= #\0 c #\9)
      (find c +extra-unreserved-characters+ :test #'char=)))

(define-condition urlencode-malformed-string (error)
  ((string :initarg :string :reader urlencode-malformed-string-string))
  (:report (lambda (c stream)
             (format stream "The string ~s is not a valid urlencoded string."
                     (urlencode-malformed-string-string c)))))

(defun urlencode (string)
  (with-output-to-string (stream)
    (map nil (lambda (c)
               (if (unreserved-char-p c)
                   (write-char c stream)
                   (map nil (lambda (octet)
                              (write-char #\% stream)
                              (let ((*print-base* 16))
                                (princ octet stream)))
                        (string-to-octets (string c) :encoding :UTF-8))))
         string)))

(defun urldecode (string)
  (with-output-to-string (stream)
    (let ((i 0) (length (length string))
          c
          (tmp (make-in-memory-output-stream :element-type '(unsigned-byte 8))))
      (tagbody
       start
         (unless (< i length)
           (go end))
         (setq c (aref string i))
         (incf i)
         (cond ((char= c #\%)
                (unless (< (1+ i) length)
                  (error 'urlencode-malformed-string :string string))
                (handler-case (write-byte (parse-integer string :start i :end (+ i 2)
                                                                :radix 16)
                                          tmp)
                  (parse-error () (error 'urlencode-malformed-string :string string)))
                (incf i 2)
                (go start))
               ((unreserved-char-p c)
                (handler-case (princ (octets-to-string (get-output-stream-sequence tmp)
                                                       :encoding :UTF-8)
                                     stream)
                  (character-decoding-error ()
                    (error 'urlencode-malformed-string :string string)))
                (princ c stream)
                (go start))
               (t (error 'urlencode-malformed-string :string string)))
       end
         (princ (octets-to-string (get-output-stream-sequence tmp) :encoding :UTF-8)
                stream)))))
