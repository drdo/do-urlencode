(cl:in-package :urlencode)

(defvar +extra-unreserved-characters+ "-_.~")

(defun unreserved-char-p (c)
  (or (char<= #\A c #\Z)
      (char<= #\a c #\z)
      (char<= #\0 c #\9)
      (find c +extra-unreserved-characters+ :test #'char=)))

(define-condition urlencode-malformed-string (error)
  ((string :initarg :string :reader urlencode-malformed-string-string))
  (:report (lambda (c stream)
             (format stream "The string ~s is not a valid urlencoded string."
                     (urlencode-malformed-string-string c)))))

(defun urlencode (string &key (queryp nil))
  (with-output-to-string (stream)
    (let ((i 0)
          (length (length string))
          c)
      (declare (type fixnum i length))
      (tagbody
       start
         (unless (< i length)
           (go end))
         (setq c (aref string i))
         (incf i)
         (cond ((unreserved-char-p c)
                (write-char c stream))
               ((char= c #\Return)
                (write-char #\Newline stream)
                (when (and (< i length) (char= (aref string i) #\Newline))
                  (incf i)))
               ((and queryp (char= c #\Space))
                (write-char #\+ stream))
               (t (map nil (lambda (octet)
                             (write-char #\% stream)
                             (format stream "~2,'0x" octet))
                       (string-to-octets (string c) :encoding :UTF-8))))
         (go start)
       end))))

(defun urldecode (string &key (lenientp nil) (queryp nil) (eol :lf))
  (flet ((get-string (octet-stream)
           (octets-to-string (get-output-stream-sequence octet-stream) :encoding :UTF-8)))
    (handler-case
        (with-output-to-string (stream)
          (let ((i 0)
                (length (length string))
                c
                (tmp (make-in-memory-output-stream :element-type '(unsigned-byte 8))))
            (declare (type fixnum i length))
            (tagbody
             start
               (unless (< i length)
                 (go end))
               (setq c (aref string i))
               (incf i)
               (cond ((char= c #\%)
                      (unless (< (1+ i) length)
                        (error 'urlencode-malformed-string :string string))
                      (let ((o (parse-integer string :start i :end (+ i 2) :radix 16)))
                        (incf i 2)
                        (if (and queryp (= o 13))
                            (progn
                              (unless (and (< (+ i 2) length)
                                           (string= (subseq string i (+ i 3)) "%0A"))
                                (error 'urlencode-malformed-string :string string))
                              (case eol
                                (:cr (write-char #\Return stream))
                                (:lf (write-char #\Newline stream))
                                (:crlf (progn (write-char #\Return stream)
                                              (write-char #\Newline stream))))
                              (incf i 3))
                            (write-byte o tmp))))
                     ((and (char= c #\+) queryp)
                      (princ (get-string tmp) stream)
                      (write-char #\Space stream))
                     ((or lenientp (unreserved-char-p c))
                      (princ (get-string tmp) stream)
                      (write-char c stream))
                     (t (error 'urlencode-malformed-string :string string)))
               (go start)
             end
             (princ (get-string tmp) stream))))
      (parse-error () (error 'urlencode-malformed-string :string string))
      (character-decoding-error () (error 'urlencode-malformed-string :string string)))))
